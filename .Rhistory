shiny::runApp()
runApp()
runApp()
#podzial mandatow metoda D'Hondta
dhondt <- function(votes, mandates){
parties<-length(votes)
given<-rep(0,parties)
dhondtlist<-rep(votes)
for(i in 1:mandates){
max<-1
for(j in 1:parties){
if(dhondtlist[j]>max){
max<-dhondtlist[j]
index<-j
}
}
given[index]<-(given[index]+1)
dhondtlist[index]<-votes[index]/(given[index]+1)
}
return(given)
}
#sprawdzenie czy partie przekroczyly staly prog wyborczy
elect.thres <- function(votes, threshold){
list <- c()
count <- length(votes)
for (i in 1:count){
if (votes[i]>=threshold)
list <- c(list, i)
}
return(list)
}
#nazywanie powtarzajacych sie danych
namess <- function(text, n){
t<-c()
for(i in 1:n){
t<-c(t,paste(text, i))
}
return(t)
}
#symulacja wyborow, dane wejsciowe to odpowiednio sformatowane dane o okregach
#wektor z wynikami sondazu oraz frekwencja podana jako liczba z przedzialu <0,1>
#domyslnie 60% procent glosow niewaznych domyslnie 5% oraz
#odchylenie standardowe bledu rozkladu sondazu
elect.sym <- function(datacons, survey, freq=.6, blankp=.05, res=1.5){
parties<-length(survey)
constituencies<-length(datacons$Nr.okregu)
allvotes<-round(abs(datacons$Liczba.wyborcow * rnorm(constituencies, freq, res/50)), digits=0)
blanks<-round(abs(allvotes * rnorm(41, blankp, res/400)), digits=0)
votes <- backp <- matrix(nrow = constituencies, ncol = parties)
colnames(backp) <- namess("Poparcie partii", parties)
colnames(votes) <- namess("Glosy partii", parties)
for(i in 1:constituencies){
temp1 <- abs(rnorm(parties, survey, res))
temp1 <- temp1/sum(temp1)
backp[i,] <- temp1
votes[i,] <- round((temp1*(allvotes[i]-blanks[i])), digits=0)
}
blanks<-allvotes-rowSums(votes)
backcountry<-round(colSums(votes)/sum(votes), digits = 4)
threshold<-elect.thres(backcountry, .05)
mandates<-matrix(rep(0,parties*constituencies), nrow = constituencies)
colnames(mandates) <- namess("Mandaty dla partii", parties)
for(i in 1:constituencies){
mandates[i, threshold] <- dhondt(votes[i, threshold], datacons$Liczba.mandatow[i])
}
mandates <- rbind(mandates,colSums(mandates))
votes <- rbind(votes, colSums(votes))
backp <- rbind(backp,backcountry)
allvotes <- c(allvotes, sum(allvotes))
blanks <- c(blanks, sum(blanks))
datacons$Siedziba<-as.character(datacons$Siedziba)
datacons[42,]<-list(0,"Podsumowanie",sum(datacons[3]), sum(datacons[4]))
datacons["Glosy oddane"]<-allvotes
datacons<-cbind(datacons,votes)
datacons["Glosy niewazne"]<-blanks
datacons<-cbind(datacons, mandates)
return(datacons)
}
#Dane o okregach wyborczych
data_cons <- read.csv(file = "https://raw.githubusercontent.com/hubertmis1/wybory/master/OkregiWyborcze.csv", sep=";")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?write.csv2
runApp()
runApp()
runApp()
runApp()
xdd<- elect.sym(data_cons, c(40,50,10))
xdd
View(xdd)
tail(xdd)
e<-tail(xdd)
View(e)
ncol(xdd)
e<-xdd[,1]
e<-xdd[1,]
View(e)
e <- xdd[, ncol(xdd)-3:ncol(xdd)]
View(e)
e <- xdd[, (ncol(xdd)-3):ncol(xdd)]
View(e)
e <- xdd[, (ncol(xdd)-2):ncol(xdd)]
library(ggplot2)
runApp()
e <- xdd[nrow(xdd), (ncol(xdd)-2):ncol(xdd)]
View(e)
e <- xdd[nrow(xdd), (ncol(xdd)-2):ncol(xdd)]
View(e)
#podzial mandatow metoda D'Hondta
dhondt <- function(votes, mandates){
parties<-length(votes)
given<-rep(0,parties)
dhondtlist<-rep(votes)
for(i in 1:mandates){
max<-1
for(j in 1:parties){
if(dhondtlist[j]>max){
max<-dhondtlist[j]
index<-j
}
}
given[index]<-(given[index]+1)
dhondtlist[index]<-votes[index]/(given[index]+1)
}
return(given)
}
#podzial mandatow metoda Sainte-Lague
saintlague <- function(votes, mandates){
parties<-length(votes)
given<-rep(0,parties)
dhondtlist<-rep(votes)
for(i in 1:mandates){
max<-1
for(j in 1:parties){
if(dhondtlist[j]>max){
max<-dhondtlist[j]
index<-j
}
}
given[index]<-(given[index]+1)
dhondtlist[index]<-votes[index]/(2*given[index]+1)
}
return(given)
}
#sprawdzenie czy partie przekroczyly staly prog wyborczy
elect.thres <- function(votes, threshold){
list <- c()
count <- length(votes)
for (i in 1:count){
if (votes[i]>=threshold)
list <- c(list, i)
}
return(list)
}
#nazywanie powtarzajacych sie danych
namess <- function(text, n){
t<-c()
for(i in 1:n){
t<-c(t,paste(text, i))
}
return(t)
}
#symulacja wyborow, dane wejsciowe to odpowiednio sformatowane dane o okregach
#wektor z wynikami sondazu oraz frekwencja podana jako liczba z przedzialu <0,1>
#domyslnie 60% procent glosow niewaznych domyslnie 5% oraz
#odchylenie standardowe bledu rozkladu sondazu
elect.sym <- function(datacons, survey, freq=.6, blankp=.05, res=1.5){
parties<-length(survey)
constituencies<-length(datacons$Nr.okregu)
allvotes<-round(abs(datacons$Liczba.wyborcow * rnorm(constituencies, freq, res/50)), digits=0)
blanks<-round(abs(allvotes * rnorm(41, blankp, res/400)), digits=0)
votes <- backp <- matrix(nrow = constituencies, ncol = parties)
colnames(backp) <- namess("Poparcie partii", parties)
colnames(votes) <- namess("Glosy partii", parties)
for(i in 1:constituencies){
temp1 <- abs(rnorm(parties, survey, res))
temp1 <- temp1/sum(temp1)
backp[i,] <- temp1
votes[i,] <- round((temp1*(allvotes[i]-blanks[i])), digits=0)
}
blanks<-allvotes-rowSums(votes)
backcountry<-round(colSums(votes)/sum(votes), digits = 4)
threshold<-elect.thres(backcountry, .05)
mandates<-matrix(rep(0,parties*constituencies), nrow = constituencies)
colnames(mandates) <- namess("Mandaty dla partii", parties)
for(i in 1:constituencies){
mandates[i, threshold] <- dhondt(votes[i, threshold], datacons$Liczba.mandatow[i])
}
mandates <- rbind(mandates,colSums(mandates))
votes <- rbind(votes, colSums(votes))
backp <- rbind(backp,backcountry)
allvotes <- c(allvotes, sum(allvotes))
blanks <- c(blanks, sum(blanks))
datacons$Siedziba<-as.character(datacons$Siedziba)
datacons[42,]<-list(0,"Podsumowanie",sum(datacons[3]), sum(datacons[4]))
datacons["Glosy oddane"]<-allvotes
datacons<-cbind(datacons,votes)
datacons["Glosy niewazne"]<-blanks
datacons<-cbind(datacons, mandates)
return(datacons)
}
#Dane o okregach wyborczych
data_cons <- read.csv(file = "https://raw.githubusercontent.com/hubertmis1/wybory/master/OkregiWyborcze.csv", sep=";")
saintlague(c(720, 300, 480), 8)
runGitHub("wybory", "hubertmis1")
seq(min(survey_B), max(survey_B), by = 0.01)
#survey_A <- c(0.51, 0.54, 0.59, 0.53)
survey_B <- c(0.15, 0.234, 0.278, 0.3) #poprzednie sondaze partii A
possible_B <- seq(min(survey_B), max(survey_B), by = 0.01) #mozliwe poparcie dla partii B
#funkcja zwracajaca ramke danych z wynikiem partii B, i potrzebna liczba glosow
#dla partii A, do objecia wiekszosci
#pierwszy argument to poparcie dla partii C
toMajority_A <- function(result_C, freq){
needed_votes_A <- data.frame(B = double(), A = integer()) #inicjalizacja pustej ramki
total_votes <- round(freq * voters, 0) #liczba wszystkich oddanych glosow
votes_C <- round(result_C * total_votes, 0) #glosy na partie C
possible_B <- seq(min(survey_B), max(survey_B), by = 0.01) #mozliwe poparcie dla partii B
i <- 0
#petla po poparciu dla partii B
for(b in possible_B){
i <- i+1
votes_B <- round(b * total_votes, 0) #liczba glosow na partie B, przy danym poparciu
possible_A <- seq(votes_C + votes_B,  total_votes , by = 1) #mozliwa liczba glosow na partie A
#petla iterujaca po poparciu dla partii A
for(a in possible_A){
votes <- c(a, votes_B, votes_C) #wektor glosow na poszczegolne partie
names(votes) <- parties
#wektor ilorazow
quotients <- votes[rep(1:length(votes), total_places)]/rep(1:total_places, each = length(votes))
#sortowanie wektora ilorazow
quotients <- sort(quotients, decreasing = TRUE)[1:total_places]
#obliczenie minimalnej liczby glosow potrzebnej do uzyskania 231 mandatow
if(length(quotients[names(quotients)=="A"]) > 230){
needed_votes_A[i,] <- c(b*100, votes[1])
break
}
}
}
#odpowiedne nazwanie kolumn w ramce danych
names(needed_votes_A) <- c("B[%]", "A[Votes]")
return (needed_votes_A)
}
#UWAGA
#Program wykonuje si? kilkadziesi?t sekund
library(ggplot2)
parties <- c("A", "B", "C") #partie biorace udzial w wyborach
total_places <- 460 #liczba mandatow
voters <- 30768394 #liczba uprawnionych do glosowania
previous_freq <- c(0.503, 0.456, 0.543, 0.488) #poprzednie frekwencje
frequency <- rnorm(1, mean(previous_freq) , sd(previous_freq)) #losowanie frekwencji
#survey_A <- c(0.51, 0.54, 0.59, 0.53)
survey_B <- c(0.15, 0.234, 0.278, 0.3) #poprzednie sondaze partii A
#funkcja zwracajaca ramke danych z wynikiem partii B, i potrzebna liczba glosow
#dla partii A, do objecia wiekszosci
#pierwszy argument to poparcie dla partii C
toMajority_A <- function(result_C, freq){
needed_votes_A <- data.frame(B = double(), A = integer()) #inicjalizacja pustej ramki
total_votes <- round(freq * voters, 0) #liczba wszystkich oddanych glosow
votes_C <- round(result_C * total_votes, 0) #glosy na partie C
possible_B <- seq(min(survey_B), max(survey_B), by = 0.01) #mozliwe poparcie dla partii B
i <- 0
#petla po poparciu dla partii B
for(b in possible_B){
i <- i+1
votes_B <- round(b * total_votes, 0) #liczba glosow na partie B, przy danym poparciu
possible_A <- seq(votes_C + votes_B,  total_votes , by = 1) #mozliwa liczba glosow na partie A
#petla iterujaca po poparciu dla partii A
for(a in possible_A){
votes <- c(a, votes_B, votes_C) #wektor glosow na poszczegolne partie
names(votes) <- parties
#wektor ilorazow
quotients <- votes[rep(1:length(votes), total_places)]/rep(1:total_places, each = length(votes))
#sortowanie wektora ilorazow
quotients <- sort(quotients, decreasing = TRUE)[1:total_places]
#obliczenie minimalnej liczby glosow potrzebnej do uzyskania 231 mandatow
if(length(quotients[names(quotients)=="A"]) > 230){
needed_votes_A[i,] <- c(b*100, votes[1])
break
}
}
}
#odpowiedne nazwanie kolumn w ramce danych
names(needed_votes_A) <- c("B[%]", "A[Votes]")
return (needed_votes_A)
}
#sprawdzenie dzialania funkcji
needed_votes_A <- data.frame(B = double(), A = integer())
needed_votes_A <- toMajority_A(0.15, frequency)
View(needed_votes_A)
ggplot(needed_votes_A, aes(needed_votes_A$`B[%]`)) +
geom_line(aes(y = needed_votes_A$`A[Votes]`), color = "red", size = 1)+
xlab("Poparcie dla partii B[%]") + ylab("Potrzebna ilosc glosow na partie A") +
ggtitle("Glosy potrzebne do uzyskania wiekszosci przez partie A")
#wykres ilosci potrzebnych glosow, przy zalozeniu 15% poparcia dla partii C
#funkcja obliczajaca potrzebna ilosc glosow na partie A, do uzyskania wiekszosci
#przy podanej wartosci procentowego poparcia partii B i C
#pierwszy argument to poparcie partii B, a drugi partii C
toMajority_givenB <- function(result_B, result_C, freq){
total_votes <- round(freq * voters, 0)
votes_C <- round(result_C * total_votes, 0)
votes_B <- round(result_B * total_votes, 0)
possible_A <- seq(votes_C + votes_B,  total_votes - votes_B - votes_C, by = 1)
for(a in possible_A){
votes <- c(a, votes_B, votes_C)
names(votes) <- parties
quotients <- votes[rep(1:length(votes), total_places)]/rep(1:total_places, each = length(votes))
quotients <- sort(quotients, decreasing = TRUE)[1:total_places]
if(length(quotients[names(quotients)=="A"]) > 230){
#print("Ilosc glosow, jaka partia A potrzebuje do zdobycia wiekszosci: ")
#print(a, digits = 7)
result <- a
break
}
else result <- "Nie mozna uzyskac wiekszosci"
}
return (result)
}
#sprawdzenie dzialania funkcji
z <- toMajority_givenB(0.15, 0.15, frequency)
paste("Ilosc glosow potrzebna partii a do uzyskania wiekszosci ", z)
for(b in possible_B){print(b)}
possible_A <- seq(votes_C + votes_B,  total_votes , by = 1) #mozliwa liczba glosow na partie A
votes_C <- round(result_C * total_votes, 0) #glosy na partie C
votes_C <- round(.15 * total_votes, 0) #glosy na partie C
runApp()
runApp()
runApp()
runApp()
p<-ggplot(data=e, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p
t(e)
p<-ggplot(data=t(e) +
geom_bar(stat="identity")
p
p<-ggplot(data=t(e)
p<-ggplot(data=t(e)
p
p<-ggplot(data=t(e)
p
e[1,]
ggplot(t(e), aes(x=factor(e[1,])))+
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
ggplot(e, aes(x=factor(e[1,])))+
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
ggplot(e, aes(x=factor(colnames(e))))+
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
ggplot(e[1,], aes(x=factor(colnames(e))))+
geom_bar(stat="bin", width=0.7, fill="steelblue")+
theme_minimal()
e[1,]
e[1,]
as.vector(e)
e<-data.frame(mandaty=as.vector(e))
View(e)
xdd<- elect.sym(data_cons, c(40,50,10))
e <- xdd[nrow(xdd), (ncol(xdd)-2):ncol(xdd)]
View(e)
e[1,1]
View(e)
c(e[1,1], e[1,2], e[1,3])
f <- data.frame(mandaty=c(e[1,1], e[1,2], e[1,3]),
partie=c("Parta 1", "Partia 2", "Partia 3"))
View(f)
ggplot(data=f, aes(x=partie, y=mandaty)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(data=f, aes(x=partie, y=mandaty)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=partie), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(data=f, aes(x=partie, y=mandaty)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=mandaty), vjust=1.6, color="white", size=3.5)+
theme_minimal()
runApp()
runApp()
runApp()
